%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 11.0.0
%%For: (1 1 1) (1)
%%Title: (4.ai)
%%CreationDate: 10/30/2006 2:45 PM
%%BoundingBox: 145 359 462 439
%%HiResBoundingBox: 145.6519 359.9717 461.877 438.0605
%%DocumentProcessColors: Cyan Magenta Yellow
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 3 () 
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 19.5376 -12.285 590.7376 805.395
%AI3_DocumentPreview: None
%AI5_ArtSize: 595.2756 841.8898
%AI5_RulerUnits: 1
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -294.7222 809.7222 0.9 1137 819 26 1 1 10 82 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:17 16
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 128 32 8
%%BeginData: 6705 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD0AFFA97EA9FD057EA87EA9A9FD72FF7EA85AA9FFFF7E7E29FFFF
%FF7E5A7EA9FD6EFFA97EA87E7E7EFFFF7E7E2FA8FFFF5A297E7E7EA9FD6B
%FF847DFFA8537E7EFFFFA87E29A9FFFF535A2FFFA87EA8FD47FFA8FD21FF
%A87EFFFFFF7EA95AA87EA97E7E7EA9A8FF53A9FFFFA97EA9FD0BFF7EA9FD
%07FF7E7EFD0AFFA9CBFD05FF7E7EFD0FFF7E7EFF7E7EFD09FF5429FD05FF
%7E7EFD18FFA87E547EFFFFA9297EA8FFA8FFFFFFA8A87E7EA8FFFFFF5354
%A8FD09FF7E2953FD07FF0729FD09FF7E017EFD05FF2907FD07FF537E537E
%535A7EFF012FA92907FD05FFA8A9A8A90729A8A9A8A9FF5301A9FD06FF7E
%2F292F292F292F292F2953A9FFFFFFA9537E2954FFA97EFD0BFFA87EA87E
%547E537EFD09FFA9027EFFFFA9FFFFFFA82929FD09FF7E297EFD05FF292F
%FD06FFA829072907290754FF292FFF072FFD04FFA8290729072907290729
%07A95429A8FD06FFA92F5453542F5453542F2907FD04FF7EFF535353A87E
%FFFFFFA8FFFFFFA8FD05FFA97E532F53FF7E7EFD08FF7E07010707070107
%0707012FFD09FF5A017EFD05FF2907A9A8FD04FFA9012FFFFFA8FFFFFF01
%2FA80707FD05FF7E5301295A7E07072F7EA8540184A8FD0FFF0707A9FFFF
%7EA9FFFFFFA95AA95A7EA9FFA87E2F3029A9FFFF5A7E7E847EFFFFFF7EFD
%08FFA90754FD077E2929FD09FF29292FFD05FF29290729A8FFFFFFA8292F
%FD06FF2F07290730FD06FF5329A8FFFFFF0754FFFF532907297EFD0EFF30
%07FFFFA87EFFA9FFFF7EA9077E292FFF7E077E7E2FFFA8075A2F53A8A8FF
%FFA8A97EFD07FF7E0759FD07FF072FFD08FF530701297EFD04FF29077E7E
%FD04FFA90154FD06FF072F7E0729FD06FF2907FD04FF2907FFFF54077E7E
%A9FD0EFF0729A9FFA9A8FFA8FF7EFFA854FFFF2F542F29FFFF297E077EFF
%FF2FFF7EFFFFA9FFA8FD07FFA9072F535453545354532929FD07FF532929
%A807297EFFFFFF292FFD06FFA8292FFD06FF292FFF072FFD06FF53297EFF
%FFA80254FFFF5329A9FD09FFA8FFFFFFA8FFFF2F07FFFF7EA9FFFFA87EFF
%A929FFA8A953547EFFA87E2F7EA8FF7E53FFFF7EFFFFFF7EA9FD07FF5407
%2907290729072929A8FD05FF7E070707A9FFA80707077EFF2907FD06FFA9
%062FFD06FF0753A82929FD06FFA90707295401077EFFFF5301A9FD08FF7E
%072FFF53077EFF2907A8FFA97E7E7EA9A8FFA9542954535453542F545354
%53542F5454FFFFA97E7E7EA984FD17FFA8307EFD05FF7E54A8FF292FFD06
%FFA8292FFD06FF292FFF072FFD08FF532F2954A8FFFFFF5329A8FD08FFA9
%075AFF7E02A9FF2F29FFFF7EFF53547EFFFFFF835F58835E5F587E595F58
%835E5F58AEFFFF7EA853A9A8A8FD04FFA92907290729072F292907290729
%067EFD06FFA8A9A9FD06FF2F29FD06FFA9072FA8A9A8A9A87E0753A92929
%FD09FFA8FFFFFFA8FFFF7E53FD09FF7E0753FF53077EFF072FFFFFA87E7E
%7EA9FFFFA8345E835E835E5E333A5E835E835E5E34FFFFFF7E7EA8A97EFD
%05FF53545354535407292F54535453547EFD06FF5407A9FD06FF0729FD07
%FF2F072907290729072953FF072FFD07FF7E0729072907290729072FA8FD
%08FFA90754FF7E07A9A8295AFFFF7E547EA87EFFFFAE34FD06FF83A7FD05
%FFA834FFFFA87E537E7EA9A8FD0AFF5401A9FD06FFA9FD05FF53077EFD06
%FF5A53FD07FFA87E7E7E597E7EA80153FF0707FD07FF7E5A535A537E535A
%532F01A9FD08FF7E0753FF530784FD05FFA97E5A54A9FFFFA85EFFAE345E
%8383FFAE835F345EFFAE34FFFFFF7E7E7EA9A8FD0BFF5329A8FD0CFF5A07
%A9FD17FF292FFF0730FD10FF5429A8FD05FFA8A9A87E0754A85A077EA8A9
%A8A9A97E7E53A87EFFFFAE34FFA75F333A3483345E115E0BAEA85EFFFFA8
%7E53547EA8FD0BFF5401A8FD0CFF53077EFFA9FFA8FFA9FFA9FD0FFF0654
%FF0707FD10FF5407A9FD05FF53010701290707012907070129017EA9FD04
%7EA8FFA85EFF83343A113434341134585EAEAE34FFFFA9A87E7E7E84FD0B
%FF53297EFD0CFF7E0729072907290729072FFD0FFF2929FF0729FD10FF2F
%29A8FD05FFA8A97EA97EA97EA97EA97EA97EA9A97EFF53547EA8FFAE34FF
%5834115E34341183113434FFA75EFFFF7E7E2F7E7EA8FD0BFF7E29A8FD0C
%FFA87E535A537E535A535A5AFD0FFF295AA85353FD10FF7E29FD15FFA9A8
%5A547E7EFFAE5EFFFFAEAEFFAE8389FFFFAEAEFFAE34FFA8FD047EA9A9FD
%60FFA87EA8547E7EA2AE34FFA8FFAEFF838983AEAEFFAEFF835EFF7E5354
%7EA87EFD62FF7EFF53A9FF7E845E343A343A3434585E343A343A34345EA9
%A8FD047EA9FD06FFA884A8FFA8FFA8A9FF7E7EFFFFA9FFFF84FFFFA9A8FF
%A9A9FFFF7EFFFFA9FFA97EA87EA9A9FF7E7EA9FF7EFFFFA9A8FFA8FFFFA9
%A8FFFFFF7EFFFFA9A8A9FFFFA8A97EA9A9FFA8A97E84A8A97EFFFFA97EA9
%A8A97EA87EA9FFFF7EFFA97EFFFF5A7E7EA8FFAEFFA8FFA85E5EFFCFFFA8
%FFCF84597E5354FF7EFD07FF5353532954FF5353542F7EFFA906A8FF2F2F
%FF537EFFA9017EFF53A8A807A87E5329A8297E535A7E2F7E2953FF29A9A8
%077EFF297EFFFFA82F7EFF29A8077EFF537E2F2F54FF542F537EA9295429
%7E077EA8542F7E297E297E7E2FFFFF7EA8A9537EA8A8A9FD0CFFA97EA954
%7EFFA9A8FD07FF54A9535A7EFF537E5A54A8FF7E5453FF7E2F7EA9A8FFFF
%7E29A97EFF7E5453FF7E7EFF7E5354FFFF7E545330847EFF7E2F54FF5A7E
%FFFFFF2FA9FF5AA95429A97EFF53FF2FFF53FF2FA8FF7E5A5AA8307EFF7E
%7EFF54FFFF2F54A9FFFFA97EA87E535A7E7E7EFD09FFA87E7E7E537E7EA8
%7EFD08FF5A7EFF7E7EFF5A53FF7E297E545329A884A82F29A9FFFF7EA929
%5AA854532FA97E7EFF53542FFFFFA8297EA82F2FA9297E29FF53A8FFFFFF
%54A8FF2FA95AA92954A854FF5A297EFF54A8FF532F53FFFF542F7E7EFF2F
%FFFF7E53FD04FFA97EA87E2F7E53A87EA8A8FFA9FFA8A97E7EA87E537E7E
%FF7EFD09FF29A9FFFF2FA8297E7EA82F2F5AFF54542FFFA929A8FFA854FF
%8429547EFF535A535AFF547E7E53A82FA82FFF7E2F537EFF7E5354537EA8
%FF5A5A7E2F7E54FF7E29FF29FFA829A9A9297E7E537E5A537E5354537EFF
%2FA8FF535AFD05FFA87EA87E537E537E537E7EA87EA87EFFA85A7D7EA8A9
%59FD0AFF84A8FFFFA97EA9A8A853A97EA9FFFF7E84A8FFA8FFFFFF7EFFFF
%A97EA9FFA97EA87EFF7EA9FF7E5AA9FFA8A9FFA87EA8FFA8A87E7E7EFFFF
%FF7EA884A97EFFFFA9A8A8A9FF7EFFA87E7EA87EFFFF847E7EA8A9A8FF7E
%FFFFA97EFD06FFA97E84A9A8547EA9297EA87E547EA9FF7E7EA8A97EFD6D
%FFA87EA8A87E7E5453545354537EA8FF7E7EA8FD70FF7EA87EA9A8FF7EA9
%A9A87EA87EA9FD73FFA9A97EA87EA97E847EA8A8FD6AFFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
8 Bn
%AI5_BeginGradient: (Black & White)
(Black & White) 0 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 50 100 %_BS
%_0 0 50 100 Bs
1 0 50 0 %_BS
%_1 0 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Green & Blue)
(Green & Blue) 0 2 Bd
[
<
99999A9A9B9B9B9C9C9D9D9D9E9E9F9F9FA0A0A1A1A1A2A2A3A3A3A4A4A5A5A5A6A6A7A7A7A8A8A9
A9A9AAAAABABABACACADADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B9
B9B9BABABBBBBBBCBCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9
C9C9CACACBCBCBCCCCCDCDCDCECECFCFCFD0D0D1D1D1D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9
D9D9DADADBDBDBDCDCDDDDDDDEDEDFDFDFE0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9
E9E9EAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F5F6F6F7F7F7F8F8F9
F9F9FAFAFBFBFBFCFCFDFDFDFEFEFFFF
>
<
000102020304050506070808090A0B0B0C0D0E0E0F101111121314141516171718191A1A1B1C1D1D
1E1F20202122232324252626272829292A2B2C2C2D2E2F2F303132323334353536373838393A3B3B
3C3D3E3E3F404141424344444546474748494A4A4B4C4D4D4E4F5050515253535455565657585959
5A5B5C5C5D5E5F5F606162626364656566676868696A6B6B6C6D6E6E6F7071717273747475767777
78797A7A7B7C7D7D7E7F80808182838384858686878889898A8B8C8C8D8E8F8F9091929293949595
96979898999A9B9B9C9D9E9E9FA0A1A1A2A3A4A4A5A6A7A7A8A9AAAAABACADADAEAFB0B0B1B2B3B3
B4B5B6B6B7B8B9B9BABBBCBCBDBEBFBF
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0
1 %_Br
[
1 0.75 0 0 1 50 100 %_BS
%_1 0.75 0 0 1 50 100 Bs
0.6 0 1 0 1 50 0 %_BS
%_0.6 0 1 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Pink, Yellow, Green)
(Pink, Yellow, Green) 0 3 Bd
[
<
00000000000000000000000000000000000000010101010101010101010101010101010101010101
01010101010202020202020202020202020202020202020202020203030303030303030303030303
03030303030303030404040404040404040404040404040404040404050505050505050505050505
05050505050505060606060606060606060606060606060606060707070707070707070707070707
07070707080808080808080808080808080808080809090909090909090909090909090909090A0A
0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C
0C0C0C0C0C0C0C0C0D0D0D0D
>
<
050506060606070708080809090A0A0A0B0B0C0C0D0D0E0E0F0F1010111112121313141415151617
17181819191A1A1B1C1C1D1D1E1F1F202021222223232425252626272828292A2A2B2C2C2D2D2E2F
2F3031313233333435353637373839393A3B3B3C3D3E3E3F4040414242434445454647474849494A
4B4C4C4D4E4F4F505151525354545556575758595A5A5B5C5C5D5E5F5F6061626363646566666768
69696A6B6C6C6D6E6F707071727373747576777778797A7B7B7C7D7E7F7F80818283838485868787
88898A8B8B8C8D8E8F8F9091929394949596979898999A9B9C9D9D9E9FA0A1A2A2A3A4A5A6A7A7A8
A9AAABACADADAEAFB0B1B2B3
>
<
CCCCCBCBCBCACACAC9C9C8C8C7C7C6C6C5C5C4C4C3C2C2C1C1C0C0BFBEBEBDBDBCBBBBBAB9B9B8B7
B7B6B5B5B4B3B3B2B1B1B0AFAFAEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A0A09F9E9D9C9C9B
9A999998979696959493929291908F8E8E8D8C8B8A8A8988878686858483828181807F7E7D7C7C7B
7A7978777676757473727171706F6E6D6C6B6A6A69686766656463636261605F5E5D5C5B5B5A5958
5756555453525151504F4E4D4C4B4A49484746464544434241403F3E3D3C3B3A3938383736353433
3231302F2E2D2C2B2A29282726252423222221201F1E1D1C1B1A191817161514131211100F0E0D0C
0B0A09080706050403020100
>
0
1 %_Br
<
737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5B5A59585756555453525150504F4E
4D4C4B4A4949484746454443434241403F3E3E3D3C3B3A3A393837363635343333323130302F2E2D
2D2C2B2A2A29282827262525242323222121201F1F1E1D1D1C1C1B1A1A1918181717161615141413
1312121111100F0F0E0E0D0D0C0C0C0B0B0A0A090908080807070606060505050404040303030202
020201010101010000000000
>
<
00000000000000000000000001010101010101010101010101010101010101010101010102020202
02020202020202020202020202020202020202020202030303030303030303030303030303030303
03030303030303030303030303040404040404040404040404040404040404040404040404040404
04040404040404040404050505050505050505050505050505050505050505050505050505050505
050505050505050505050505
>
<
BFBFBFC0C0C0C0C0C0C0C0C0C1C1C1C1C1C1C1C1C1C2C2C2C2C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3
C3C4C4C4C4C4C4C4C4C4C4C5C5C5C5C5C5C5C5C5C5C5C6C6C6C6C6C6C6C6C6C6C6C6C7C7C7C7C7C7
C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACA
CACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCC
>
0
1 %_Br
[
0.05 0.7 0 0 1 50 100 %_BS
%_0.05 0.7 0 0 1 50 100 Bs
0 0.02 0.8 0 1 57 36 %_BS
%_0 0.02 0.8 0 1 57 36 Bs
0.45 0 0.75 0 1 37 0 %_BS
%_0.45 0 0.75 0 1 37 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Purple, Red & Yellow)
(Purple, Red & Yellow) 0 3 Bd
[
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A
>
<
CCCCCCCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D4D4D4
D4D5D5D5D5D5D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDCDCDCDCDC
DDDDDDDDDDDEDEDEDEDFDFDFDFDFE0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E3E3E3E3E4E4E4E4E4E5E5
E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E9E9E9E9E9EAEAEAEAEAEBEBEBEBEBECECECECECEDEDED
EDEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5
F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFDFDFDFDFDFEFE
FEFEFEFFFFFF
>
0
1 %_Br
<
E6E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBE
BDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796
9594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E
6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746
4544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E
1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100
>
<
E6E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9EAEAEAEA
EAEAEAEAEAEBEBEBEBEBEBEBEBEBECECECECECECECECECEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEE
EEEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F3F3F3
F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7
F7F7F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFCFC
FCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFFFFFFFFFF
>
<
00010203040405060708090A0B0C0C0D0E0F10111213141415161718191A1B1C1D1D1E1F20212223
242525262728292A2B2C2D2D2E2F30313233343535363738393A3B3C3D3D3E3F4041424344454546
4748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5E5E5F60616263646566666768696A
6B6C6D6E6E6F70717273747576767778797A7B7C7D7E7E7F80818283848586878788898A8B8C8D8E
8F8F90919293949596979798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFAFB0B1
B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C8C9CACBCC
>
0
1 %_Br
[
0 0.04 1 0 1 50 100 %_BS
%_0 0.04 1 0 1 50 100 Bs
0 1 0.8 0 1 50 50 %_BS
%_0 1 0.8 0 1 50 50 Bs
0.9 0.9 0 0 1 50 0 %_BS
%_0.9 0.9 0 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Rainbow)
(Rainbow) 0 6 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
1
0
0
1 %_Br
1
<
0708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E
2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F50515253545556
5758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E
7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6
A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCE
CFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6
F7F8F9FAFBFCFDFEFF
>
0
0
1 %_Br
1
<
00000000000000000000000000000000000001010101010101010101010101010101010101010101
01010101010101010101010101010202020202020202020202020202020202020202020202020202
02020202020202020202030303030303030303030303030303030303030303030303030303030303
03030303030304040404040404040404040404040404040404040404040404040404040404040404
04040505050505050505050505050505050505050505050505050505050505050505050505050606
06060606060606060606060606060606060606060606060606060606060606060607070707070707
07070707070707070707070707070707
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0
1 %_Br
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
0
1
0
1 %_Br
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
1
0
1 %_Br
[
0 1 0 0 1 50 100 %_BS
%_0 1 0 0 1 50 100 Bs
1 1 0 0 1 50 80 %_BS
%_1 1 0 0 1 50 80 Bs
1 0.0279 0 0 1 50 60 %_BS
%_1 0.0279 0 0 1 50 60 Bs
1 0 1 0 1 50 40 %_BS
%_1 0 1 0 1 50 40 Bs
0 0 1 0 1 50 20 %_BS
%_0 0 1 0 1 50 20 Bs
0 1 1 0 1 50 0 %_BS
%_0 1 1 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Steel Bar)
(Steel Bar) 0 3 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
0 %_Br
[
0 0 50 100 %_BS
%_0 0 50 100 Bs
1 0 50 70 %_BS
%_1 0 50 70 Bs
0 0 50 0 %_BS
%_0 0 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Yellow & Orange Radial)
(Yellow & Orange Radial) 1 2 Bd
[
0
<
0001010203040506060708090A0B0C0C0D0E0F10111213131415161718191A1B1C1D1D1E1F202122
232425262728292A2B2B2C2D2E2F303132333435363738393A3B3C3D3E3E3F404142434445464748
494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60606162636465666768696A6B6C6D6E6F
707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C
>
<
FFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9
F9F8F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F3F3F3F3F3F3F2F2F2F2
F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEFEEEEEEEEEEEDEDEDEDEDEDECECECECECEBEBEBEBEB
EBEAEAEAEAEAE9E9E9E9E9E9E8E8E8E8E8E8E7E7E7E7E7E6E6E6E6E6E6
>
0
1 %_Br
[
0 0 1 0 1 52 19 %_BS
%_0 0 1 0 1 52 19 Bs
0 0.55 0.9 0 1 50 100 %_BS
%_0 0.55 0.9 0 1 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Yellow & Purple Radial)
(Yellow & Purple Radial) 1 2 Bd
[
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738
393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D
5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F808182
83848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7
A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCB
CCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0
F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF
>
<
ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191
908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A797978777776
7575747373727171706F6F6E6D6D6C6B6B6A6969686767666564646362626160605F5E5E5D5C5C5B
5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140
403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A292828272626
25242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B
0A090908070706050504030302010100
>
0
1 %_Br
[
0 0.08 0.67 0 1 50 14 %_BS
%_0 0.08 0.67 0 1 50 14 Bs
1 1 0 0 1 50 100 %_BS
%_1 1 0 0 1 50 100 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration]) Pc
1 g
(K=0) Pc
0 g
(K=100) Pc
Bb
2 (Black & White) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Black & White) Pc
Bb
2 (Pink, Yellow, Green) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Pink, Yellow, Green) Pc
Bb
0 0 0 0 Bh
2 (Yellow & Purple Radial) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Yellow & Purple Radial) Pc
Bb
2 (Rainbow) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Rainbow) Pc
Bb
2 (Steel Bar) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Steel Bar) Pc
Bb
2 (Purple, Red & Yellow) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Purple, Red & Yellow) Pc
Bb
2 (Green & Blue) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Green & Blue) Pc
Bb
0 0 0 0 Bh
2 (Yellow & Orange Radial) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Yellow & Orange Radial) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 100 Lb
(Layer 1) Ln
0 A
1 Ap
0 O
1 0.6 0 0 k
0 J 0 j 1 w 4 M []0 d0 XR
538.8896 75.8975 m
538.8896 657 L
57 657 L
57 75.8975 L
538.8896 75.8975 L
(f) *
u
u
u
u
u
*u
0 Ap
1 0.7 0 0 k
154.9214 404.9551 m
154.6997 403.8486 153.9917 403.1133 153.0347 403.3057 c
152.0474 403.5 151.605 404.5313 151.8042 405.4893 c
151.8403 405.7051 151.9097 405.9072 152.0444 406.0879 c
151.9399 405.3496 152.2349 404.4688 153.0571 404.3066 c
153.8091 404.1572 154.2134 404.626 154.353 405.3027 c
154.3921 405.5068 154.4165 405.709 154.4214 405.9063 c
150.5591 406.6709 L
150.0796 406.7686 149.7407 406.8457 149.3921 406.4434 c
149.3638 406.4502 L
149.7036 408.1377 L
149.731 408.1309 L
149.7964 407.6689 150.439 407.5947 150.8276 407.5195 c
154.0552 406.8809 L
154.437 406.8037 155.0571 406.6318 155.314 407.0186 c
155.3374 407.0156 L
154.9214 404.9551 l
f
/BBAccumRotation (0.020956) XT
*U
*u
149.1919 399.1357 m
148.6978 399.5293 148.5142 400.2461 148.5317 400.8535 c
148.5542 401.4268 148.7573 402.0264 149.1958 402.4014 c
149.7144 402.8438 150.3052 402.8066 150.9292 402.7832 c
153.2563 402.7119 L
153.6509 402.6973 154.2886 402.6162 154.4683 403.0518 c
154.4927 403.0518 L
154.437 401.4082 L
154.4165 401.4082 L
154.2603 401.8447 153.6255 401.8184 153.2329 401.8252 c
150.9009 401.8994 L
149.7407 401.9424 149.1851 401.4727 149.1548 400.585 c
149.1401 400.0977 149.3218 399.5957 149.7183 399.3008 c
149.98 399.1016 150.1958 399.1045 150.5103 399.0938 c
153.1382 399.0029 L
153.5249 398.9932 154.1646 398.9209 154.3472 399.3477 c
154.3735 399.3457 L
154.3149 397.707 L
154.2896 397.7021 L
154.1392 398.1484 153.5005 398.1172 153.0991 398.1279 c
149.8062 398.2393 L
149.4146 398.248 148.7808 398.3232 148.6021 397.8867 c
148.5737 397.8867 L
148.6177 399.1563 L
149.1919 399.1357 l
f
/BBAccumRotation (0.020956) XT
*U
*u
153.8013 393.8545 m
154.0981 394.2314 154.231 394.792 154.1685 395.2734 c
154.105 395.7607 153.8325 396.3555 153.2349 396.2783 c
152.0474 396.1289 152.4546 393.1758 150.853 392.9736 c
149.9214 392.8506 148.9312 393.7021 148.7573 395.0381 c
148.687 395.5645 148.6978 396.0967 148.814 396.6074 c
149.8667 397.002 L
149.4897 396.4365 149.3062 395.6953 149.395 395.0244 c
149.4556 394.5391 149.8491 393.8389 150.4526 393.9102 c
151.8052 394.0889 151.1753 397.0107 153.0112 397.2451 c
154.1021 397.3789 154.6646 396.334 154.7993 395.2822 c
154.8579 394.8555 154.853 394.4082 154.7769 393.9795 C
153.8013 393.8545 l
f
/BBAccumRotation (0.020956) XT
*U
*u
152.8872 389.6006 m
152.4155 391.2441 L
154.769 391.0137 l
152.8872 389.6006 L
f
1 D
152.3384 389.1777 m
151.2798 388.3984 l
150.7563 388.0088 150.6851 387.918 150.3765 388.2734 C
150.354 388.2646 L
150.8481 386.5586 L
150.8696 386.5664 l
150.9819 387.1094 151.4087 387.3936 151.8306 387.7158 C
155.6401 390.668 L
155.2642 391.9824 L
155.2358 391.9746 l
155.2231 391.541 154.8286 391.5947 154.4927 391.6279 C
150.5903 392.0293 l
150.0601 392.0791 149.5474 392.0879 149.1665 392.5039 C
149.1431 392.4961 L
149.5776 390.9629 L
149.606 390.9717 l
149.644 391.415 149.9019 391.4258 150.4263 391.3789 C
151.73 391.2842 l
152.3384 389.1777 L
f
*U
*u
0 D
152.4692 385.7627 m
152.0278 385.5498 151.7104 385.4072 151.6714 384.876 c
151.6479 384.8662 L
150.9712 386.2422 L
150.9956 386.252 L
151.439 385.958 151.7544 386.1123 152.1909 386.3252 c
155.3228 387.834 L
155.7661 388.0498 156.0796 388.2012 156.1157 388.7207 c
156.1401 388.7354 L
156.6987 387.5977 L
156.688 387.5938 L
156.6089 387.5195 156.5835 387.4678 156.5483 387.3818 c
156.4468 387.1963 L
154.2231 382.5986 L
157.1958 384.0361 L
157.6411 384.249 157.9565 384.3916 157.9858 384.9189 c
158.0093 384.9297 L
158.6831 383.5566 L
158.6616 383.5479 L
158.2261 383.8379 157.9146 383.6875 157.4722 383.4756 c
153.0708 381.3438 L
152.9907 381.9883 153.1304 382.3535 153.4058 382.9131 c
155.5073 387.2324 L
152.4692 385.7627 l
f
*U
*u
157.3853 377.3262 m
157.021 377.0049 156.7515 376.7773 156.8608 376.2559 c
156.8442 376.2393 L
155.8091 377.377 L
155.8267 377.3965 L
156.3374 377.2344 156.5991 377.4619 156.9614 377.7871 c
159.5532 380.1006 L
159.9155 380.4229 160.1733 380.6563 160.064 381.1631 c
160.0825 381.1816 L
160.9399 380.2402 L
160.9341 380.2363 L
160.8735 380.1465 160.8677 380.0859 160.856 379.9941 c
160.8081 379.7891 L
159.9507 374.7607 L
162.4077 376.9561 L
162.772 377.2813 163.0386 377.5049 162.9204 378.0205 c
162.9438 378.0381 L
163.9712 376.9043 L
163.9507 376.8867 L
163.4517 377.0459 163.1938 376.8223 162.8306 376.4932 c
159.189 373.2383 L
158.9282 373.8398 158.9634 374.2285 159.0767 374.8438 c
159.8921 379.5645 L
157.3853 377.3262 l
f
*U
*u
164.5796 372.5176 m
163.2241 373.5703 L
165.2583 374.7617 l
164.5796 372.5176 L
f
1 D
164.3882 371.8623 m
163.9985 370.6094 l
163.811 369.9902 163.8062 369.8701 163.3521 369.9834 C
163.3315 369.96 L
164.7466 368.8711 L
164.7671 368.8906 l
164.5269 369.3926 164.7026 369.8701 164.8501 370.3789 C
166.1704 374.9912 L
165.0815 375.834 L
165.0649 375.8086 l
165.311 375.4492 164.9575 375.2676 164.6694 375.0938 C
161.2827 373.1348 l
160.8228 372.8643 160.4067 372.5732 159.8472 372.6797 C
159.8364 372.6582 L
161.104 371.6836 L
161.1147 371.7041 l
160.8833 372.0801 161.0874 372.2451 161.5317 372.5117 C
162.646 373.2021 l
164.3882 371.8623 L
f
*U
*u
0 D
167.3423 368.6914 m
167.0845 368.2637 166.9097 367.9736 167.1724 367.5137 c
167.1636 367.4932 L
165.6646 368.3496 L
165.6782 368.374 L
166.1362 368.2979 166.4146 368.8721 166.6118 369.21 c
168.5669 372.5479 L
167.9028 372.9307 L
167.5767 373.1152 167.1899 373.2295 166.8296 373.1504 c
166.8042 373.165 L
167.5913 373.9014 L
167.6128 373.8887 L
167.6812 373.7959 167.7798 373.7412 167.8677 373.6729 c
168.062 373.5635 L
170.8765 371.9395 L
171.0063 371.8672 171.1274 371.8047 171.2563 371.7949 c
171.2778 371.7832 L
170.5132 371.0283 L
170.4927 371.042 L
170.5474 371.3613 170.2661 371.5742 170.021 371.7188 c
169.3394 372.1025 L
167.3423 368.6914 l
f
*U
*u
171.4634 370.3721 m
171.6235 370.7363 171.937 371.291 171.5962 371.6191 c
171.605 371.6426 L
173.1245 370.9795 L
173.1177 370.959 L
172.647 370.9795 172.437 370.3721 172.2817 370.0156 c
170.9585 367.0283 L
170.7983 366.6689 170.4956 366.1152 170.8247 365.7891 c
170.814 365.7686 L
169.2964 366.4277 L
169.3091 366.4502 L
169.772 366.4189 169.98 367.0293 170.1362 367.3838 C
171.4634 370.3721 l
f
*U
*u
176.3022 369.3994 m
177.6313 369.0361 178.0835 367.6406 177.7407 366.4268 c
177.3911 365.1836 176.314 364.4814 175.0347 364.8389 c
173.7114 365.2012 173.2202 366.6348 173.5444 367.7988 c
173.9048 369.0605 174.9976 369.7627 176.3022 369.3994 c
f
1 D
176.5347 369.9863 m
174.7798 370.5166 173.0181 369.5771 172.5718 367.9893 c
172.0835 366.2813 173.1606 364.708 174.8247 364.2451 c
176.4966 363.7793 178.2661 364.625 178.7417 366.3271 c
179.1685 367.8271 178.3013 369.5068 176.5347 369.9863 c
f
*U
*u
0 D
180.1655 364.459 m
180.1294 363.9727 180.0942 363.6289 180.5386 363.3281 c
180.5347 363.3027 L
178.9927 363.418 L
178.9927 363.4404 L
179.4751 363.6748 179.5063 364.0225 179.5415 364.5039 c
179.7964 367.9463 L
179.8315 368.4346 179.8608 368.7773 179.4253 369.0703 c
179.4253 369.0947 L
180.6997 368.999 L
180.6987 368.9932 L
180.7261 368.8867 180.7583 368.8438 180.813 368.7676 c
180.9204 368.585 L
183.8091 364.3604 L
184.0591 367.6406 L
184.0942 368.1172 184.1284 368.4678 183.6831 368.7578 c
183.6851 368.7783 L
185.2183 368.6699 L
185.2134 368.6445 L
184.7476 368.4199 184.7192 368.0723 184.6831 367.5889 c
184.3208 362.75 L
183.7153 363.002 183.4692 363.3027 183.1216 363.8213 c
180.4194 367.7979 L
180.1655 364.459 l
f
*U
*u
188.8101 366.0391 m
187.0952 365.8672 L
187.7319 368.1201 l
188.8101 366.0391 L
f
1 D
189.1284 365.4248 m
189.7202 364.2598 l
190.0171 363.6797 190.0962 363.5908 189.688 363.3623 C
189.689 363.3359 L
191.4741 363.5156 L
191.4673 363.5391 l
190.9478 363.7412 190.7388 364.2041 190.4937 364.6729 C
188.23 368.9111 L
186.8608 368.7715 L
186.8608 368.7461 l
187.2944 368.6611 187.1685 368.2832 187.0737 367.957 C
185.9927 364.2207 l
185.8521 363.7129 185.7554 363.2139 185.2769 362.9131 C
185.2778 362.8887 L
186.8774 363.0488 L
186.8755 363.0762 l
186.4409 363.1885 186.4771 363.4443 186.6108 363.9434 C
186.9331 365.2051 l
189.1284 365.4248 L
f
*U
*u
0 D
194.3511 364.9678 m
194.9399 365.0889 195.3794 365.4111 195.7075 365.873 c
195.7319 365.8789 L
195.5972 364.6533 L
192.1274 363.7334 L
192.1187 363.7598 L
192.5054 364.0244 192.2915 364.6309 192.188 365.0068 c
191.3452 368.1592 L
191.2397 368.542 191.1226 369.1709 190.6499 369.2109 c
190.6431 369.2383 L
192.2563 369.6641 L
192.2612 369.6406 L
191.8745 369.3662 192.1001 368.7598 192.1997 368.3877 c
193.1851 364.7441 L
194.3511 364.9678 l
f
*U
*u
202.9556 368.7021 m
202.8579 368.0811 202.3286 367.5586 201.7925 367.2666 c
201.2876 366.9941 200.6646 366.8643 200.1147 367.0508 c
199.4673 367.2666 199.1997 367.7852 198.9009 368.334 c
197.7827 370.3652 L
197.5952 370.7041 197.3452 371.2881 196.8706 371.2217 c
196.8618 371.2432 L
198.3188 372.0322 L
198.3296 372.0098 L
198.0269 371.6582 198.3745 371.125 198.564 370.7852 c
199.6802 368.7549 L
200.2397 367.749 200.9272 367.5059 201.7144 367.9365 c
202.147 368.167 202.4839 368.5752 202.5425 369.0713 c
202.5825 369.3906 202.4741 369.5791 202.3218 369.8486 c
201.062 372.1387 L
200.8755 372.4814 200.6108 373.0605 200.1528 373 c
200.1401 373.0156 L
201.5952 373.8057 L
201.6147 373.7852 L
201.3032 373.4336 201.6548 372.9014 201.8491 372.5547 c
203.4253 369.6865 L
203.6138 369.3457 203.8726 368.7676 204.3462 368.833 c
204.3589 368.8115 L
203.23 368.2031 L
202.9556 368.7021 l
f
*U
*u
205.8315 371.3105 m
206.145 370.9385 206.3647 370.6641 206.8892 370.7539 c
206.9106 370.7354 L
205.7183 369.75 L
205.7065 369.7715 L
205.8862 370.2725 205.6626 370.5381 205.3481 370.9102 c
203.1128 373.5654 L
202.8013 373.9297 202.5796 374.1973 202.061 374.1084 c
202.0464 374.1299 L
203.0259 374.9395 L
203.0327 374.9336 L
203.1216 374.874 203.1743 374.8633 203.271 374.8477 c
203.4771 374.792 L
208.5151 373.7568 L
206.3911 376.2715 L
206.0786 376.6475 205.8618 376.916 205.3384 376.8232 c
205.3247 376.8428 L
206.5054 377.8193 L
206.5181 377.7969 L
206.3394 377.3105 206.561 377.0439 206.8765 376.6768 c
210.0151 372.9473 L
209.4038 372.7119 209.0132 372.7578 208.4009 372.8965 c
203.6655 373.8818 L
205.8315 371.3105 l
f
*U
*u
208.1284 377.9717 m
207.8306 378.2344 207.3901 378.7021 206.9712 378.4814 c
206.9526 378.498 L
208.0562 379.7266 L
208.0737 379.709 L
207.9067 379.2744 208.4263 378.8887 208.7183 378.6328 c
211.1792 376.4648 L
211.4751 376.2012 211.9116 375.7402 212.3286 375.96 c
212.3491 375.9395 L
211.2446 374.7109 L
211.2231 374.7314 L
211.396 375.1543 210.8774 375.5439 210.5874 375.8008 C
208.1284 377.9717 l
f
*U
*u
211.7905 382.2461 m
211.4214 382.793 210.9995 383.4375 210.5122 383.124 c
210.4888 383.1328 L
211.2329 384.1904 L
214.8472 378.9121 L
214.1714 378.6455 213.9946 378.5205 213.2856 378.707 c
209.6021 379.6533 L
209.1421 379.7744 208.647 379.9502 208.1851 379.8096 c
208.1665 379.8232 L
208.8931 380.8623 L
208.9722 380.7969 L
209.1313 380.6846 209.5776 380.5781 209.7769 380.5322 c
213.687 379.5078 L
211.7905 382.2461 l
f
*U
*u
216.3374 383.4092 m
216.9194 384.3516 L
217.2173 384.8447 217.3188 385.46 217.1655 386.0186 c
217.1704 386.04 L
218.0327 385.1953 L
216.4321 381.9512 L
216.4097 381.9639 L
216.4663 382.4268 215.856 382.666 215.5054 382.8359 c
212.5483 384.2646 L
212.188 384.4375 211.6382 384.7617 211.2925 384.4336 c
211.272 384.4492 L
212.4927 386.9365 L
212.5562 387.0654 212.6392 387.1914 212.6362 387.3203 c
212.6421 387.3457 L
213.5649 386.9004 L
213.5532 386.8779 L
213.1509 386.7705 212.9653 386.4678 212.7896 386.1123 c
212.6548 385.8418 212.5269 385.5645 212.4526 385.293 c
213.9097 384.584 L
214.3657 385.5107 L
214.4263 385.6357 214.4878 385.7598 214.4878 385.876 c
214.4966 385.9004 L
215.3315 385.4932 L
215.3218 385.4727 L
215.0337 385.457 214.8823 385.125 214.7583 384.8877 c
214.478 384.3115 L
216.3374 383.4092 l
f
*U
*u
213.604 390.0234 m
213.9683 391.126 214.7466 391.5352 215.5024 391.292 c
216.23 391.0566 216.5933 390.2383 216.5347 389.5146 c
218.4224 390.2119 L
218.9673 390.418 219.5698 390.7959 220.0278 391.168 c
219.7739 390.416 L
219.6323 389.9756 219.4341 389.7393 219.0483 389.5928 c
217.4604 388.9932 L
216.0444 388.6143 L
216.1597 389.3076 216.106 390.1738 215.3247 390.4248 c
214.7261 390.6152 214.2085 390.2148 214.0542 389.6563 c
213.9985 389.4668 213.9634 389.2764 213.937 389.0791 c
217.6548 387.8789 L
218.0356 387.7559 218.6265 387.5078 218.9155 387.8809 c
218.9399 387.8711 L
218.4224 386.2959 L
218.3989 386.3037 L
218.3853 386.7705 217.7515 386.915 217.3804 387.04 c
214.2515 388.0439 L
213.8696 388.1709 213.2837 388.4248 212.981 388.0566 c
212.9595 388.0615 L
213.604 390.0234 l
f
*U
*u
215.938 395.6143 m
215.5415 395.3359 215.2573 394.8379 215.1763 394.3584 c
215.0962 393.8711 215.1841 393.2266 215.7788 393.1348 c
216.9565 392.9365 217.4282 395.8799 219.02 395.6221 c
219.9458 395.4736 220.644 394.373 220.4272 393.041 c
220.3433 392.5195 220.1753 392.0098 219.9165 391.5537 c
218.7983 391.4844 L
219.3159 391.9141 219.7134 392.5664 219.8228 393.2334 c
219.9009 393.7217 219.7319 394.5039 219.1294 394.6025 c
217.7876 394.8203 217.5366 391.8438 215.7124 392.1406 c
214.6255 392.3164 214.395 393.4844 214.5659 394.5293 c
214.6372 394.9541 214.77 395.3818 214.9663 395.7695 C
215.938 395.6143 l
f
*U
*u
216.188 397.0977 m
215.7866 397.1191 215.1509 397.2148 214.9604 396.7881 c
214.9399 396.7881 L
215.0327 398.4219 L
215.0571 398.4219 L
215.1978 397.9824 215.8481 397.9951 216.2378 397.9756 c
219.522 397.7891 L
219.9175 397.7676 220.5493 397.6777 220.7427 398.0957 c
220.7661 398.0957 L
220.6724 396.4609 L
220.646 396.4639 L
220.5151 396.9043 219.8696 396.8867 219.4751 396.9121 C
216.188 397.0977 l
f
*U
*u
219.5366 401.5684 m
220.0386 401.5967 220.3794 401.6045 220.6216 402.082 c
220.6528 402.084 L
220.7437 400.3662 L
220.7124 400.3652 L
220.5249 400.79 219.8901 400.707 219.4976 400.6807 c
215.6099 400.4775 L
215.6519 399.7109 L
215.6704 399.3457 215.7905 398.96 216.0552 398.707 c
216.0571 398.6816 L
215.0044 398.9297 L
214.9995 398.9551 L
215.0415 399.0557 215.0386 399.1709 215.0435 399.2822 c
215.0327 399.5039 L
214.855 402.7285 L
214.8511 402.875 214.8364 403.0098 214.7769 403.1221 c
214.7739 403.1494 L
215.8296 402.9229 L
215.8296 402.8994 L
215.5308 402.7715 215.5054 402.4219 215.519 402.1377 c
215.5601 401.3604 L
219.5366 401.5684 l
f
*U
*u
218.7632 406.7549 m
219.2749 406.8574 219.5298 406.9063 219.7563 407.4014 c
219.7856 407.4131 L
220.1284 405.7568 L
220.1011 405.751 L
219.8003 406.1221 219.2563 405.9512 218.853 405.8711 c
217.5884 405.6133 L
215.5933 403.7422 L
215.2632 403.4375 215.0161 403.2119 214.8765 402.7607 c
214.7202 403.5313 L
214.6636 403.8027 214.6724 404.0625 214.8296 404.2139 c
216.7798 406.0273 L
214.9731 406.7559 L
214.729 406.8574 214.2798 406.9678 214.1431 406.4453 c
214.1196 406.4414 L
213.812 407.9248 L
217.4097 406.4795 L
218.7632 406.7549 l
f
*U
1 Ap
154.9604 412.9023 m
154.9604 412.4902 154.6196 412.1533 154.2056 412.1533 c
153.7817 412.1533 153.4468 412.4902 153.4468 412.9023 c
153.4468 413.3164 153.7817 413.6523 154.2056 413.6523 c
154.6196 413.6523 154.9604 413.3164 154.9604 412.9023 c
f
216.0073 412.9023 m
216.0073 412.4902 215.6655 412.1533 215.2524 412.1533 c
214.8315 412.1533 214.4917 412.4902 214.4917 412.9023 c
214.4917 413.3164 214.8315 413.6523 215.2524 413.6523 c
215.6655 413.6523 216.0073 413.3164 216.0073 412.9023 c
f
U
U
u
0 Ap
186.9126 434.2842 m
186.1724 434.2842 L
186.1724 436.0605 L
185.2847 436.0605 L
185.2847 431.4551 L
184.9829 431.1309 184.4731 431.1504 Y
181.979 431.1504 L
181.9419 431.1504 181.9136 431.1826 181.9136 431.2188 C
181.9136 434.8154 L
184.5835 434.8154 L
184.5835 435.5283 L
181.0259 435.5283 L
181.0298 431.2197 L
181.0298 430.792 181.3794 430.4512 181.8091 430.4512 C
184.4478 430.4512 L
184.8853 430.4111 185.2847 430.6377 V
185.2847 428.1592 L
186.1724 428.1592 L
186.1724 433.5752 L
186.9126 433.5752 L
186.9126 428.1592 L
187.7964 428.1592 L
187.7964 436.0605 L
186.9126 436.0605 L
186.9126 434.2842 L
f
U
158.1743 417.4902 m
160.4263 419.9648 L
162.4116 418.1904 L
163.0054 418.8428 L
161.021 420.6152 L
163.27 423.0811 L
162.7368 423.5596 L
157.6411 417.9639 L
158.1743 417.4902 L
f
/BBAccumRotation (0.836180) XT
*u
1 D
157.1255 419.6338 m
157.4429 419.3486 157.939 419.3721 158.228 419.6904 C
161.0659 422.8037 L
161.355 423.1221 161.3286 423.6133 161.0093 423.9004 C
158.7847 425.8926 L
158.187 425.2383 L
159.0913 424.4346 L
156.395 421.4727 L
155.4907 422.2793 L
154.8989 421.6289 L
157.1255 419.6338 L
f
/BBAccumRotation (0.836180) XT
0 D
159.6216 423.9561 m
160.4155 423.2471 L
160.4409 423.2227 160.4458 423.1807 160.4185 423.1553 C
157.812 420.292 L
157.7866 420.2656 157.7466 420.2627 157.7192 420.2871 C
156.9253 420.9971 L
159.6216 423.9561 L
f
/BBAccumRotation (0.836180) XT
*U
172.2065 433.9082 m
171.397 433.5508 L
173.7544 428.3145 L
174.5649 428.6709 L
173.231 431.6377 L
174.3013 432.1123 L
174.0083 432.7598 L
172.937 432.2861 L
172.2065 433.9082 L
f
170.9155 425.6484 m
170.0405 427.5928 L
169.2319 427.2334 L
170.106 425.291 L
170.2817 424.8994 170.7437 424.7236 171.1382 424.8994 C
175.4146 426.792 L
175.1216 427.4385 L
171.0034 425.6162 L
170.9702 425.5996 170.9312 425.6162 170.9155 425.6484 C
f
u
168.9722 431.4424 m
168.6577 432.1426 L
167.8481 431.7842 L
168.1636 431.084 L
169.0972 429.0137 167.2886 427.7012 167.1636 427.6133 C
167.9536 427.3125 L
168.3667 427.6758 169.2144 428.5479 169.2886 429.666 C
170.1772 428.9746 171.3921 429.0186 171.9419 429.085 C
172.2446 429.8643 L
172.062 429.8232 169.8989 429.3906 168.9722 431.4424 C
f
U
u
210.7964 421.168 m
210.1978 421.7988 L
207.936 419.7012 L
207.2046 420.4756 L
209.4663 422.5732 L
208.8687 423.209 L
206.6089 421.1094 L
205.3325 422.46 L
204.8179 421.9795 L
209.8823 416.6162 L
210.395 417.0947 L
208.5337 419.0684 L
210.7964 421.168 L
f
211.4497 420.3125 m
210.5308 419.4609 209.7886 419.1934 Y
210.3921 418.5527 L
211.1362 418.8232 212.0503 419.6738 V
214.3442 421.8008 L
214.3413 421.8047 L
214.3442 421.8047 L
210.3403 426.0459 L
209.8257 425.5684 L
213.2261 421.9619 L
211.4497 420.3125 L
f
U
u
202.7124 429.0186 m
202.9995 429.6719 L
201.9155 430.1357 L
202.6284 431.7646 L
201.8149 432.1152 L
199.9448 427.8438 L
200.7622 427.4941 L
201.6323 429.4834 L
202.7124 429.0186 L
f
200.6167 427.1738 m
195.4683 429.3906 L
195.1841 428.7354 L
199.519 426.8721 L
198.644 424.8672 L
199.4585 424.5166 L
200.6167 427.1709 L
200.6157 427.1729 L
200.6167 427.1738 L
f
*u
1 D
200.895 431.7344 m
198.8364 432.623 L
199.1919 433.4336 L
198.3745 433.7852 L
198.0181 432.9736 L
195.9624 433.8584 L
195.6753 433.2002 L
196.6772 432.7686 L
196.3091 432.5938 196.0103 432.3057 195.8403 431.9238 c
195.439 431.0068 195.9458 429.9072 196.9702 429.4668 c
197.9956 429.0273 199.1509 429.4121 199.5532 430.3252 c
199.7202 430.709 199.7271 431.126 199.6069 431.5107 C
200.6108 431.0791 L
200.895 431.7344 L
f
0 D
197.2593 430.123 m
196.688 430.3682 196.4194 431.0195 196.6646 431.5762 c
196.9058 432.1328 197.5698 432.3848 198.1421 432.1387 c
198.7114 431.8936 198.98 431.2432 198.7358 430.6855 c
198.4917 430.1289 197.8306 429.876 197.2593 430.123 c
f
*U
U
u
*u
1 Ap
223.7388 399.0156 m
223.7388 377.4541 206.2563 359.9717 184.6958 359.9717 c
163.1304 359.9717 145.6519 377.4541 145.6519 399.0156 c
145.6519 420.5781 163.1304 438.0605 184.6958 438.0605 c
206.2563 438.0605 223.7388 420.5781 223.7388 399.0156 c
f
1 D
184.6958 437.5264 m
163.4253 437.5264 146.1831 420.2861 146.1831 399.0156 c
146.1831 377.7471 163.4253 360.5059 184.6958 360.5059 c
205.9624 360.5059 223.2046 377.7471 223.2046 399.0156 c
223.2046 420.2861 205.9624 437.5264 184.6958 437.5264 c
f
*U
*u
0 D
212.9888 399.0156 m
212.9888 383.3887 200.3208 370.7217 184.6958 370.7217 c
169.0669 370.7217 156.3979 383.3887 156.3979 399.0156 c
156.3979 414.6426 169.0669 427.3105 184.6958 427.3105 c
200.3208 427.3105 212.9888 414.6426 212.9888 399.0156 c
f
1 D
184.6958 426.7783 m
169.3608 426.7783 156.9292 414.3477 156.9292 399.0156 c
156.9292 383.6816 169.3608 371.2539 184.6958 371.2539 c
200.0239 371.2539 212.4546 383.6816 212.4546 399.0156 c
212.4546 414.3477 200.0239 426.7783 184.6958 426.7783 c
f
*U
U
U
u
*u
0 Ap
0 D
1 0 0.9 0 k
202.3257 383.665 m
189.1929 383.6689 L
185.1323 383.6396 184.6265 380.9609 Y
183.7944 383.9961 179.8853 383.6689 Y
167.0464 383.6689 L
167.0464 402.499 L
179.4233 402.499 L
183.5444 402.4219 184.6382 399.1631 Y
185.9858 402.4658 190.2427 402.4961 Y
202.3257 402.498 L
202.3257 383.665 L
f
u
u
1 D
189.4058 404.3701 m
185.7974 404.2578 184.6616 402.1416 Y
183.5151 404.3594 180.0425 404.3633 Y
165.1665 404.3633 L
165.1665 381.8047 L
179.7329 381.8047 L
181.7192 381.8047 182.4224 380.8711 182.6577 380.2012 C
186.6821 380.2012 L
187.3804 381.8916 189.4077 381.793 Y
204.2192 381.793 L
204.2192 404.3701 L
189.4058 404.3701 L
f
U
U
*U
*u
177.0464 393.8223 m
171.6196 393.8223 L
171.6196 388.3594 L
171.6196 388.3564 L
179.0884 388.3564 L
179.0884 388.373 L
179.0815 388.373 L
179.0815 391.9434 L
180.9731 391.9434 L
180.9731 388.3564 L
188.4253 388.3564 L
188.4253 391.9434 L
190.312 391.9434 L
190.312 388.3633 L
197.771 388.3633 L
197.771 390.251 L
192.3569 390.251 L
192.3569 391.9453 L
197.7739 391.9453 L
197.7739 397.6152 L
190.312 397.6152 L
190.312 393.8271 L
188.4253 393.8271 L
188.4253 397.6152 L
186.3813 397.6152 L
186.3813 393.8291 L
183.0044 393.8291 L
183.0044 397.6152 L
180.9692 397.6152 L
180.9692 393.8271 L
179.0874 393.8271 L
179.0874 397.6152 L
171.6138 397.6152 L
171.6138 395.7334 L
177.0464 395.7334 L
177.0464 393.8223 L
f
0 D
177.0483 390.2344 m
173.6567 390.2344 L
173.6567 391.9434 L
177.0483 391.9434 L
177.0483 390.2344 L
f
186.3892 390.2344 m
183.0093 390.2344 L
183.0093 391.9443 L
186.3892 391.9443 L
186.3892 390.2344 L
f
192.3569 395.7373 m
195.7368 395.7373 L
195.7368 393.8262 L
192.3569 393.8262 L
192.3569 395.7373 L
f
*U
u
1 0.7 0 0 k
183.5679 414.8135 m
185.3735 415.4111 L
183.5679 415.4111 L
183.5679 414.8135 L
f
*u
1 D
179.6704 412.2256 m
180.3345 412.9209 181.0259 412.832 181.0259 412.5371 c
181.0259 412.2402 180.6831 411.8857 y
176.4019 411.8857 L
174.0562 415.2666 L
174.0562 415.2666 L
173.4712 416.1367 172.7212 416.5127 171.479 416.5127 c
170.23 416.5127 167.8667 416.5127 165.1724 416.5127 C
165.1724 406.3301 L
169.0063 406.332 178.4419 406.3398 179.5503 406.3301 c
183.7974 406.291 184.6284 404.4814 Y
185.519 405.8896 187.2329 406.3232 189.8774 406.3262 c
191.187 406.3262 200.437 406.3262 204.2144 406.3262 C
204.2192 416.5127 L
201.4331 416.5127 199.0698 416.5127 197.8198 416.5127 c
196.5884 416.5127 195.8374 416.1367 195.2524 415.2666 C
195.2495 415.2666 L
192.854 411.8857 L
190.9438 411.8857 189.3003 411.8857 V
189.3003 414.8965 L
191.7319 417.2734 L
189.2231 417.2725 L
189.8569 417.8281 L
184.769 417.8281 L
183.7456 417.8281 182.938 417.4111 182.646 416.8301 C
180.856 416.8301 L
179.2085 416.8301 178.6079 415.9014 178.9429 414.6816 C
179.6704 412.2256 L
f
0 D
202.3257 408.2012 m
195.5659 408.2012 195.2964 408.2012 190.3481 408.2012 c
187.1558 408.2012 185.6655 407.9854 184.6499 406.8818 C
183.5562 407.9414 182.7046 408.1963 179.5093 408.1963 c
176.8052 408.1963 169.2964 408.1963 167.0503 408.1963 C
167.0503 414.6309 L
170.9663 414.6309 L
171.354 414.6396 171.6772 414.5488 171.8882 414.4375 c
172.0444 414.3506 172.3276 414.1582 172.5347 413.877 c
172.7954 413.5156 175.1157 410.1162 Y
181.8091 410.1162 L
182.4321 411.4043 182.814 412.3027 v
183.2056 413.21 183.0698 413.8467 182.2417 413.9082 c
181.5435 413.9629 181.106 413.7959 181.0317 413.5098 C
180.7349 414.5244 L
180.5552 415.0391 180.6831 415.4141 181.3999 415.4141 C
183.5679 415.4141 L
183.5679 415.3926 183.6118 416.1162 184.8042 416.1162 C
188.3784 416.1162 L
187.3716 415.1875 L
187.3716 410.1162 L
194.3091 410.1162 L
196.5161 413.5156 196.7759 413.877 v
196.9771 414.1582 197.2612 414.3506 197.4204 414.4375 c
197.6284 414.5488 197.9546 414.6426 198.3403 414.6494 C
202.3257 414.6475 L
202.3257 408.2012 L
f
*U
U
*u
1 0 0.9 0 k
181.6909 386.3545 m
181.9507 386.4443 182.1782 386.6289 182.3101 386.8525 c
182.3208 386.8525 L
182.3208 385.2441 L
182.3208 385.0811 182.3062 384.9521 182.4624 384.8516 c
182.4624 384.8408 L
181.8618 384.8408 L
181.8618 384.8516 L
182.0396 384.9365 182.0249 385.0713 182.0249 385.2441 c
182.0249 386.3467 L
181.6909 386.3467 L
181.6909 386.3545 l
f
*U
*u
183.1665 384.9629 m
183.6333 385.0576 184.0513 385.4775 184.0513 385.9541 c
184.0513 386.2422 183.8872 386.5645 183.5542 386.5645 c
183.3081 386.5645 183.1333 386.3711 183.1333 386.1348 c
183.1333 385.8711 183.3081 385.668 183.5728 385.668 c
183.6792 385.668 183.7866 385.6982 183.8774 385.7578 c
183.6831 385.5186 L
183.6099 385.4932 183.5269 385.4805 183.4468 385.4805 c
183.1099 385.4805 182.8452 385.7324 182.8452 386.0674 c
182.8452 386.4893 183.186 386.7666 183.5933 386.7666 c
184.0454 386.7666 184.3413 386.4131 184.3413 385.9824 c
184.3413 385.6592 184.1655 385.3389 183.9097 385.1377 c
183.6479 384.9297 183.3521 384.8271 183.0259 384.7852 C
183.1665 384.9629 l
f
*U
*u
185.4526 385.457 m
185.2007 385.457 184.9946 385.4688 184.8384 385.4775 C
185.4526 386.5117 l
185.4526 385.457 L
f
1 D
185.4526 385.2305 m
185.4526 385.1572 l
185.4526 385.0088 185.4702 384.9072 185.312 384.8516 C
185.312 384.8408 L
185.8716 384.8408 L
185.8716 384.8516 l
185.7437 384.9131 185.7388 385.0479 185.7388 385.1719 C
185.7388 385.2305 L
185.9692 385.2305 L
186.1079 385.5752 l
186.0073 385.4902 185.8735 385.457 185.7388 385.457 C
185.7388 386.7207 L
185.3413 386.7207 L
184.4468 385.2305 l
185.4526 385.2305 L
f
*U
*u
0 D
187.4888 386.5938 m
187.2964 386.5674 187.0659 386.4189 186.9243 386.29 c
186.728 386.1074 186.6118 385.8662 186.6118 385.5967 c
186.6118 385.3027 186.7798 384.9854 187.1167 384.9854 c
187.3716 384.9854 187.5181 385.1777 187.5181 385.4209 c
187.5181 385.7021 187.3696 385.8955 187.0747 385.8955 c
186.9644 385.8955 186.855 385.8613 186.7573 385.8008 c
186.9429 386.0322 L
187.019 386.0674 187.104 386.0869 187.1958 386.0869 c
187.5552 386.0869 187.811 385.8438 187.811 385.4834 c
187.811 385.0791 187.4878 384.7959 187.0864 384.7959 c
186.6343 384.7959 186.3208 385.1572 186.3208 385.5928 c
186.3208 386.2744 187.0093 386.7178 187.6284 386.7715 C
187.4888 386.5938 l
f
*U
U
U
u
u
*u
1 0.7 0 0 k
241.3149 381.668 m
243.4429 381.668 245.0649 380.6357 245.0649 378.8027 c
245.0649 376.918 243.3169 375.7217 241.4663 375.7217 c
241.0552 375.7217 240.6499 375.7705 240.27 375.9551 c
241.6763 376.0303 243.2036 376.9023 243.2036 378.4736 c
243.2036 379.9121 242.187 380.4883 240.8784 380.4883 c
240.479 380.4883 240.1079 380.4561 239.7319 380.3877 c
239.7319 373.0049 L
239.7319 372.0879 239.7163 371.4375 240.5815 370.9453 c
240.5815 370.8926 L
237.3247 370.8926 L
237.3247 370.9453 L
238.1577 371.2432 238.0601 372.4521 238.0601 373.1836 c
238.0601 379.3555 L
238.0601 380.0928 238.1577 381.2861 237.3433 381.6133 c
237.3433 381.668 L
241.3149 381.668 l
f
*U
*u
253.4224 371.9766 m
252.7026 371.0293 251.3608 370.6367 250.2134 370.6367 c
249.1304 370.6367 247.9888 370.9766 247.2524 371.7793 c
246.3833 372.7256 246.4175 373.8193 246.4175 374.999 c
246.4175 379.374 L
246.4175 380.1104 246.5337 381.3076 245.6968 381.6133 c
245.6968 381.668 L
248.8042 381.668 L
248.8042 381.6133 L
247.9888 381.3076 248.0854 380.1104 248.0854 379.374 c
248.0854 374.999 L
248.0854 372.8291 249.0005 371.8105 250.6909 371.8105 c
251.606 371.8105 252.5347 372.1865 253.0767 372.957 c
253.439 373.4512 253.4224 373.8584 253.4224 374.4502 c
253.4224 379.374 L
253.4224 380.1104 253.522 381.3076 252.7026 381.6133 c
252.7026 381.668 L
255.8091 381.668 L
255.8228 381.6133 L
254.9946 381.3076 255.0854 380.1104 255.0854 379.3555 c
255.0854 373.1836 L
255.0854 372.4521 254.9946 371.2568 255.8228 370.9453 c
255.8228 370.8926 L
253.4224 370.8926 L
253.4224 371.9766 l
f
*U
*u
264.0317 379.7178 m
263.397 380.3711 262.3784 380.7412 261.4644 380.7412 c
260.5298 380.7412 259.3462 380.3877 259.3462 379.2568 c
259.3462 377.0156 264.9771 377.0488 264.9771 374.0205 c
264.9771 372.2734 263.146 370.6367 260.5933 370.6367 c
259.6001 370.6367 258.5991 370.7813 257.6646 371.123 c
257.1899 373.1719 L
258.1538 372.3369 259.4995 371.8105 260.772 371.8105 c
261.7095 371.8105 263.1196 372.3643 263.1196 373.5166 c
263.1196 376.0664 257.4858 375.6104 257.4858 379.0781 c
257.4858 381.1348 259.6001 381.9238 261.5952 381.9238 c
262.4146 381.9238 263.2524 381.8145 264.0317 381.5645 C
264.0317 379.7178 l
f
*U
*u
271.9741 376.1523 m
268.7534 376.1523 L
270.3706 380.2744 l
271.9741 376.1523 L
f
1 D
272.4507 374.9365 m
273.3315 372.6309 l
273.7808 371.4902 273.9077 371.2988 273.1069 370.9453 C
273.1069 370.8926 L
276.4585 370.8926 L
276.4585 370.9453 l
275.5298 371.4209 275.2329 372.3369 274.8579 373.2715 C
271.4517 381.668 L
268.8628 381.668 L
268.8628 381.6133 l
269.6538 381.3721 269.3423 380.6758 269.1118 380.0928 C
266.3774 373.2715 l
266.021 372.3369 265.7437 371.4209 264.7896 370.9453 C
264.7896 370.8926 L
267.8081 370.8926 L
267.8081 370.9453 l
267.0142 371.2432 267.1313 371.7178 267.4819 372.6309 C
268.3276 374.9365 l
272.4507 374.9365 L
f
*U
*u
0 D
278.7271 373.0273 m
278.7271 372.1045 278.7036 371.4531 279.5747 370.9453 c
279.5747 370.8926 L
276.6792 370.8926 L
276.6792 370.9453 L
277.5474 371.4531 277.5474 372.1045 277.5474 373.0273 c
277.5474 379.5586 L
277.5474 380.4717 277.5474 381.126 276.6958 381.6133 c
276.6958 381.668 L
279.0864 381.668 L
279.0864 381.6494 L
279.1558 381.4521 279.2153 381.3721 279.3306 381.2451 c
279.5581 380.9102 L
285.5532 373.3555 L
285.5532 379.5586 L
285.5532 380.4717 285.5659 381.126 284.6968 381.6133 c
284.6968 381.668 L
287.5737 381.668 L
287.5737 381.6133 L
286.7271 381.126 286.7271 380.4717 286.7271 379.5586 c
286.7271 370.3711 L
285.5659 370.7666 285.063 371.2988 284.3384 372.2383 c
278.7271 379.3555 L
278.7271 373.0273 l
f
*U
*u
295.4028 373.0273 m
295.4028 372.1045 295.3833 371.4531 296.2476 370.9453 c
296.2476 370.8926 L
293.353 370.8926 L
293.353 370.9453 L
294.2212 371.4531 294.2212 372.1045 294.2212 373.0273 c
294.2212 379.5586 L
294.2212 380.4717 294.2212 381.126 293.3667 381.6133 c
293.3667 381.668 L
295.7612 381.668 L
295.7612 381.6494 L
295.8286 381.4521 295.8901 381.3721 296.0083 381.2451 c
296.2378 380.9102 L
302.2231 373.3555 L
302.2231 379.5586 L
302.2231 380.4717 302.2378 381.126 301.3765 381.6133 c
301.3765 381.668 L
304.2505 381.668 L
304.2505 381.6133 L
303.4048 381.126 303.4048 380.4717 303.4048 379.5586 c
303.4048 370.3711 L
302.2378 370.7666 301.73 371.2988 301.0122 372.2383 c
295.4028 379.3555 L
295.4028 373.0273 l
f
*U
*u
311.3105 376.1523 m
308.0859 376.1523 L
309.7031 380.2744 l
311.3105 376.1523 L
f
1 D
311.7832 374.9365 m
312.6641 372.6309 l
313.1074 371.4902 313.2363 371.2988 312.4375 370.9453 C
312.4375 370.8926 L
315.791 370.8926 L
315.791 370.9453 l
314.8574 371.4209 314.5625 372.3369 314.1875 373.2715 C
310.7813 381.668 L
308.2012 381.668 L
308.2012 381.6133 l
308.9785 381.3721 308.6777 380.6758 308.4453 380.0928 C
305.7085 373.2715 l
305.3452 372.3369 305.0728 371.4209 304.1206 370.9453 C
304.1206 370.8926 L
307.1348 370.8926 L
307.1348 370.9453 l
306.3511 371.2432 306.4644 371.7178 306.8086 372.6309 C
307.6543 374.9365 l
311.7832 374.9365 L
f
*U
*u
0 D
319.4453 373.0273 m
319.4453 372.0879 319.4316 371.4531 320.2949 370.9453 c
320.2949 370.8926 L
317.0605 370.8926 L
317.0605 370.9453 L
317.873 371.2568 317.7793 372.4521 317.7793 373.1836 c
317.7793 380.4883 L
316.3398 380.4883 L
315.6328 380.4883 314.8965 380.3047 314.3887 379.8271 c
314.334 379.8271 L
314.9121 381.7822 L
314.9629 381.7822 L
315.1523 381.6982 315.3711 381.6982 315.5898 381.668 c
315.9902 381.668 L
322.0996 381.668 L
322.3789 381.668 322.6406 381.6807 322.8496 381.7822 c
322.9043 381.7822 L
322.3789 379.8271 L
322.3281 379.8271 L
322.1211 380.3994 321.4609 380.4883 320.916 380.4883 c
319.4453 380.4883 L
319.4453 373.0273 l
f
*U
*u
324.793 379.3555 m
324.793 380.1104 324.9082 381.3076 324.0801 381.6133 c
324.0801 381.668 L
327.1797 381.668 L
327.1797 381.6133 L
326.3672 381.3076 326.4629 380.0928 326.4629 379.3555 c
326.4629 373.1836 L
326.4629 372.4521 326.3672 371.2568 327.1797 370.9453 c
327.1797 370.8926 L
324.0801 370.8926 L
324.0801 370.9453 L
324.8828 371.2432 324.793 372.4521 324.793 373.1836 C
324.793 379.3555 l
f
*U
*u
334.0332 380.7627 m
336.623 380.7627 338.1484 378.459 338.1484 376.0664 c
338.1484 373.627 336.5586 371.8105 334.0723 371.8105 c
331.5039 371.8105 329.8867 374.1719 329.8867 376.4531 c
329.8867 378.9277 331.5039 380.7627 334.0332 380.7627 c
f
1 D
334.1484 381.9424 m
330.7148 382.0225 328.0254 379.4219 328.0254 376.3135 c
328.0254 372.957 330.748 370.6367 333.9805 370.6367 c
337.248 370.6367 340.0137 373.0576 340.0137 376.3965 c
340.0137 379.3398 337.5859 381.9561 334.1484 381.9424 c
f
*U
*u
0 D
342.5703 373.0273 m
342.5703 372.1045 342.5488 371.4531 343.4199 370.9453 c
343.4199 370.8926 L
340.5313 370.8926 L
340.5313 370.9453 L
341.3945 371.4531 341.3945 372.1045 341.3945 373.0273 c
341.3945 379.5586 L
341.3945 380.4717 341.3945 381.126 340.5469 381.6133 c
340.5469 381.668 L
342.9297 381.668 L
342.9297 381.6494 L
342.9941 381.4521 343.0605 381.3721 343.1719 381.2451 c
343.4023 380.9102 L
349.3926 373.3555 L
349.3926 379.5586 L
349.3926 380.4717 349.4121 381.126 348.541 381.6133 c
348.541 381.668 L
351.4238 381.668 L
351.4238 381.6133 L
350.5781 381.126 350.5781 380.4717 350.5781 379.5586 c
350.5781 370.3711 L
349.4121 370.7666 348.9121 371.2988 348.1855 372.2383 c
342.5703 379.3555 L
342.5703 373.0273 l
f
*U
*u
358.4082 376.1523 m
355.1836 376.1523 L
356.8047 380.2744 l
358.4082 376.1523 L
f
1 D
358.8867 374.9365 m
359.7695 372.6309 l
360.2148 371.4902 360.3398 371.2988 359.5469 370.9453 C
359.5469 370.8926 L
362.8926 370.8926 L
362.8926 370.9453 l
361.9648 371.4209 361.6719 372.3369 361.291 373.2715 C
357.8828 381.668 L
355.2969 381.668 L
355.2969 381.6133 l
356.0879 381.3721 355.7773 380.6758 355.5488 380.0928 C
352.8184 373.2715 l
352.457 372.3369 352.1777 371.4209 351.2383 370.9453 C
351.2383 370.8926 L
354.2422 370.8926 L
354.2422 370.9453 l
353.457 371.2432 353.5684 371.7178 353.9063 372.6309 C
354.7656 374.9365 l
358.8867 374.9365 L
f
*U
*u
0 D
368.1113 372.0723 m
369.2227 372.0088 370.1934 372.3828 371.0078 373.0723 c
371.0566 373.0723 L
370.2129 370.8926 L
363.4805 370.8926 L
363.4805 370.9453 L
364.3145 371.2432 364.2168 372.4521 364.2168 373.1836 c
364.2168 379.3555 L
364.2168 380.1104 364.3145 381.3076 363.4805 381.6133 c
363.4805 381.668 L
366.6074 381.668 L
366.6074 381.6133 L
365.7617 381.3076 365.8906 380.0928 365.8906 379.3555 c
365.8906 372.2197 L
368.1113 372.0723 l
f
*U
*u
383.2852 371.9766 m
382.5625 371.0293 381.2246 370.6367 380.0781 370.6367 c
378.9902 370.6367 377.8574 370.9766 377.1172 371.7793 c
376.2441 372.7256 376.2773 373.8193 376.2773 374.999 c
376.2773 379.374 L
376.2773 380.1104 376.3965 381.3076 375.5586 381.6133 c
375.5586 381.668 L
378.666 381.668 L
378.666 381.6133 L
377.8574 381.3076 377.9492 380.1104 377.9492 379.374 c
377.9492 374.999 L
377.9492 372.8291 378.8613 371.8105 380.5527 371.8105 c
381.4648 371.8105 382.3984 372.1865 382.9473 372.957 c
383.2969 373.4512 383.2852 373.8584 383.2852 374.4502 c
383.2852 379.374 L
383.2852 380.1104 383.3828 381.3076 382.5625 381.6133 c
382.5625 381.668 L
385.668 381.668 L
385.6914 381.6133 L
384.8516 381.3076 384.9551 380.1104 384.9551 379.3555 c
384.9551 373.1836 L
384.9551 372.4521 384.8516 371.2568 385.6914 370.9453 c
385.6914 370.8926 L
383.2852 370.8926 L
383.2852 371.9766 l
f
*U
*u
389.209 373.0273 m
389.209 372.1045 389.1797 371.4531 390.0527 370.9453 c
390.0527 370.8926 L
387.1543 370.8926 L
387.1543 370.9453 L
388.0273 371.4531 388.0273 372.1045 388.0273 373.0273 c
388.0273 379.5586 L
388.0273 380.4717 388.0273 381.126 387.1738 381.6133 c
387.1738 381.668 L
389.5645 381.668 L
389.5645 381.6494 L
389.625 381.4521 389.6914 381.3721 389.8047 381.2451 c
390.043 380.9102 L
396.0215 373.3555 L
396.0215 379.5586 L
396.0215 380.4717 396.0449 381.126 395.1777 381.6133 c
395.1777 381.668 L
398.0547 381.668 L
398.0547 381.6133 L
397.207 381.126 397.207 380.4717 397.207 379.5586 c
397.207 370.3711 L
396.0449 370.7666 395.541 371.2988 394.8184 372.2383 c
389.209 379.3555 L
389.209 373.0273 l
f
*U
*u
400.4492 379.3555 m
400.4492 380.1104 400.5684 381.3076 399.7227 381.6133 c
399.7227 381.668 L
402.8457 381.668 L
402.8457 381.6133 L
402.0234 381.3076 402.125 380.0928 402.125 379.3555 c
402.125 373.1836 L
402.125 372.4521 402.0234 371.2568 402.8457 370.9453 c
402.8457 370.8926 L
399.7227 370.8926 L
399.7227 370.9453 L
400.5586 371.2432 400.4492 372.4521 400.4492 373.1836 C
400.4492 379.3555 l
f
*U
*u
411.0859 378.7031 m
411.5273 379.8652 412.0801 381.207 411.0703 381.6133 c
411.0703 381.668 L
413.5078 381.668 L
409.1836 370.4014 L
408.0469 371.1602 407.666 371.2881 407.1895 372.582 c
404.7148 379.2754 L
404.4023 380.1104 404.1582 381.0586 403.4395 381.6133 c
403.4395 381.668 L
405.834 381.668 L
405.8164 381.4668 L
405.8164 381.1094 406.123 380.3047 406.2617 379.9424 c
408.8555 372.8291 L
411.0859 378.7031 l
f
*U
*u
416.6738 372.2734 m
418.7539 372.0723 L
419.8242 371.9766 420.957 372.3213 421.7734 373.0439 c
421.8242 373.0439 L
421.084 370.8926 L
414.2637 370.8926 L
414.2637 370.9453 L
415.1035 371.2432 415.0039 372.4521 415.0039 373.1836 c
415.0039 379.3555 L
415.0039 380.1104 415.1035 381.3076 414.2637 381.6133 c
414.2637 381.668 L
419.5 381.668 L
419.7754 381.668 420.0625 381.6309 420.2715 381.7471 c
420.3242 381.7471 L
420.3242 379.8271 L
420.2715 379.8271 L
419.7578 380.4268 419.0898 380.4883 418.3398 380.4883 c
417.7617 380.4883 417.1914 380.4717 416.6738 380.3711 c
416.6738 377.3252 L
418.6152 377.3252 L
418.8809 377.3252 419.1328 377.3252 419.334 377.4268 c
419.3789 377.4268 L
419.3789 375.6875 L
419.334 375.6875 L
419.0742 376.1611 418.3848 376.1523 417.8809 376.1523 c
416.6738 376.1523 L
416.6738 372.2734 l
f
*U
*u
426.4727 381.668 m
428.6582 381.668 429.8574 380.5205 429.8574 379.0283 c
429.8574 377.5889 428.5996 376.4531 427.2598 376.1523 c
429.6191 373.1836 L
430.3008 372.3369 431.334 371.4902 432.2676 370.8926 c
430.7598 370.8926 L
429.8848 370.8926 429.3555 371.1133 428.8594 371.7178 c
426.8633 374.1885 L
425.3574 376.4932 L
426.666 376.6924 428.1895 377.292 428.1895 378.8369 c
428.1895 380.0146 427.1719 380.6953 426.084 380.6475 c
425.7012 380.6357 425.3398 380.585 424.9688 380.5205 c
424.9688 373.1836 L
424.9688 372.4375 424.8652 371.2432 425.7012 370.9453 c
425.7012 370.8926 L
422.5781 370.8926 L
422.5781 370.9453 L
423.4141 371.2432 423.2871 372.4521 423.2871 373.1836 c
423.2871 379.3555 L
423.2871 380.1104 423.4141 381.3076 422.5781 381.6133 c
422.5781 381.668 L
426.4727 381.668 l
f
*U
*u
438.3125 379.7178 m
437.666 380.3711 436.6582 380.7412 435.7305 380.7412 c
434.8047 380.7412 433.625 380.3877 433.625 379.2568 c
433.625 377.0156 439.2637 377.0488 439.2637 374.0205 c
439.2637 372.2734 437.4219 370.6367 434.873 370.6367 c
433.8672 370.6367 432.873 370.7813 431.9375 371.123 c
431.459 373.1719 L
432.4316 372.3369 433.7676 371.8105 435.0469 371.8105 c
435.9824 371.8105 437.3945 372.3643 437.3945 373.5166 c
437.3945 376.0664 431.7559 375.6104 431.7559 379.0781 c
431.7559 381.1348 433.8672 381.9238 435.8633 381.9238 c
436.6914 381.9238 437.5254 381.8145 438.3125 381.5645 C
438.3125 379.7178 l
f
*U
*u
441.1934 379.3555 m
441.1934 380.1104 441.3164 381.3076 440.4766 381.6133 c
440.4766 381.668 L
443.5801 381.668 L
443.5801 381.6133 L
442.7656 381.3076 442.8691 380.0928 442.8691 379.3555 c
442.8691 373.1836 L
442.8691 372.4521 442.7656 371.2568 443.5801 370.9453 c
443.5801 370.8926 L
440.4766 370.8926 L
440.4766 370.9453 L
441.293 371.2432 441.1934 372.4521 441.1934 373.1836 C
441.1934 379.3555 l
f
*U
*u
449.418 373.0273 m
449.418 372.0879 449.4082 371.4531 450.2754 370.9453 c
450.2754 370.8926 L
447.0293 370.8926 L
447.0293 370.9453 L
447.8496 371.2568 447.748 372.4521 447.748 373.1836 c
447.748 380.4883 L
446.3105 380.4883 L
445.6055 380.4883 444.875 380.3047 444.3652 379.8271 c
444.3125 379.8271 L
444.8867 381.7822 L
444.9395 381.7822 L
445.1309 381.6982 445.3516 381.6982 445.5566 381.668 c
445.9688 381.668 L
452.0742 381.668 L
452.3574 381.668 452.6172 381.6807 452.832 381.7822 c
452.875 381.7822 L
452.3574 379.8271 L
452.3066 379.8271 L
452.0938 380.3994 451.4277 380.4883 450.9004 380.4883 c
449.418 380.4883 L
449.418 373.0273 l
f
*U
*u
457.8555 373.0273 m
457.8555 372.0352 457.8555 371.5518 458.6914 370.9453 c
458.6914 370.8926 L
455.5 370.8926 L
455.5 370.9453 L
456.3008 371.3535 456.1797 372.4121 456.1797 373.1836 c
456.1797 375.6104 L
453.4668 379.9775 L
453.0234 380.6953 452.6973 381.2451 451.9082 381.668 c
453.4004 381.668 L
453.9219 381.668 454.4102 381.5479 454.625 381.207 c
457.2422 376.9365 L
459.2715 379.9775 L
459.5547 380.3877 459.9336 381.1689 459.0156 381.6133 c
459.0156 381.668 L
461.877 381.668 L
457.8555 375.6104 L
457.8555 373.0273 l
f
*U
U
U
u
u
u
360.8203 418.3848 m
357.3809 418.3848 L
357.3809 426.7471 L
353.2422 426.7471 L
353.2422 405.0723 L
351.8223 403.5488 349.4375 403.6406 Y
337.8086 403.6406 L
337.6406 403.6406 337.5059 403.7832 337.5059 403.9541 C
337.5039 420.8877 L
349.9609 420.8877 L
349.9609 424.2383 L
333.3613 424.2393 L
333.3652 403.9551 L
333.3652 401.9463 335 400.3379 337.0156 400.3379 C
349.3379 400.3379 L
351.3691 400.1504 353.2422 401.2178 V
353.2422 389.5527 L
357.3809 389.5527 L
357.3809 415.042 L
360.8203 415.042 L
360.8203 389.5527 L
364.9551 389.5527 L
364.9551 426.7471 L
360.8203 426.7471 L
360.8203 418.3848 L
f
U
U
u
237.3159 402.0332 m
253.0132 402.0332 L
253.0132 389.5635 L
257.1528 389.5635 L
257.1528 402.0332 L
272.7944 402.0332 L
272.7944 405.374 L
237.3159 405.374 L
237.3159 402.0332 L
f
*u
1 D
245.1743 408.7832 m
264.9282 408.7832 L
266.9458 408.7832 268.5786 410.416 268.5786 412.4326 C
268.5835 426.4268 L
264.4478 426.4268 L
264.4429 420.7646 L
245.6626 420.7646 L
245.6626 426.4268 L
241.5229 426.4268 L
241.5298 412.4326 L
241.5298 410.416 243.1626 408.7832 245.1743 408.7832 C
f
0 D
264.4429 417.4248 m
264.4399 412.4297 L
264.4399 412.2568 264.3022 412.1211 264.1333 412.1211 C
245.9731 412.1211 L
245.8042 412.1211 245.6675 412.2568 245.6675 412.4297 C
245.6626 417.4248 L
264.4429 417.4248 L
f
*U
U
u
315.6328 426.7598 m
311.4922 426.7598 L
311.4922 399.7646 L
315.6328 399.7646 L
315.6328 415.0498 L
321.1211 415.0498 L
321.1211 418.3916 L
315.6328 418.3916 L
315.6328 426.7598 L
f
294.2827 393.709 m
294.2798 403.7314 L
290.146 403.7314 L
290.1401 393.709 L
290.1401 391.7031 291.7759 390.0684 293.7886 390.0684 C
315.6406 390.0684 L
315.6406 393.4014 L
294.5933 393.4014 L
294.4194 393.4014 294.2827 393.5391 294.2827 393.709 C
f
u
297.1235 422.3164 m
297.1235 425.9219 L
292.9888 425.9219 L
292.9888 422.3164 L
292.9888 411.6318 282.7583 409.4365 282.0562 409.2979 C
284.8413 406.5078 L
287.3091 407.2744 292.5942 409.4053 295.0562 414.0762 C
297.5112 409.4199 302.7739 407.2891 305.2437 406.5156 C
308.0313 409.3008 L
307.1719 409.4756 297.1235 411.7236 297.1235 422.3164 C
f
U
U
u
u
447.5176 410.9014 m
443.4336 410.9014 L
443.4336 396.4473 L
438.4434 396.4473 L
438.4434 410.9014 L
434.3652 410.9014 L
434.3652 396.4473 L
425.6563 396.4473 L
425.6563 393.1436 L
460.2422 393.1436 L
460.2422 396.4473 L
447.5176 396.4473 L
447.5176 410.9014 L
f
452.543 410.3828 m
452.543 404.5166 451.0879 401.1162 Y
455.2246 401.1162 L
456.6504 404.5166 456.6504 410.3828 V
456.6504 425.0381 L
456.6406 425.0381 L
456.6406 425.042 L
429.2969 425.042 L
429.2969 421.7441 L
452.543 421.7441 L
452.543 410.3828 L
f
U
U
u
410.2773 418.3916 m
410.2773 426.7471 L
406.1289 426.7471 L
406.1289 404.833 L
410.2773 404.833 L
410.2773 415.0381 L
415.7813 415.0381 L
415.7813 418.3916 L
410.2773 418.3916 L
f
410.2734 403.1875 m
384.0664 403.1875 L
384.0664 399.8369 L
406.1289 399.8369 L
406.1289 389.5615 L
410.2773 389.5615 L
410.2773 403.1729 L
410.2734 403.1729 L
410.2734 403.1875 L
f
*u
1 D
399.791 414.8193 m
399.791 416.7891 399.0469 418.5947 397.8066 420.0322 C
402.9121 420.0322 L
402.9121 423.4023 L
392.4297 423.4023 L
392.4297 427.5693 L
388.2754 427.5693 L
388.2754 423.4023 L
377.8008 423.4023 L
377.8008 420.0322 L
382.9043 420.0322 L
381.6641 418.5947 380.9102 416.7891 380.9102 414.8193 c
380.9102 410.1211 385.1406 406.3115 390.3535 406.3115 c
395.5664 406.3115 399.791 410.1211 399.791 414.8193 c
f
0 D
385.0898 414.8516 m
385.0898 417.7109 387.4434 420.0264 390.3535 420.0264 c
393.2578 420.0264 395.6191 417.7109 395.6191 414.8516 c
395.6191 411.999 393.2578 409.6787 390.3535 409.6787 c
387.4434 409.6787 385.0898 411.999 385.0898 414.8516 c
f
*U
U
U
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
